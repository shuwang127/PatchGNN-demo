(-68, -142, 'CDG', -1)
(-9, -140, 'CDG', -1)
(-104, -131, 'DDGc', 1)
(-9, -118, 'CDG', 1)
(-83, -143, 'DDGc', -1)
(-68, -143, 'CDG', -1)
(-118, -139, 'CDG', 1)
(-3, -118, 'DDGcycle', 1)
(-83, -118, 'DDGc', 1)
(-83, -109, 'DDGc', 1)
(-104, -118, 'DDGc', 1)
(-83, -131, 'DDGc', 1)
(-107, -108, 'DDGn', 1)
(-140, -141, 'DDGn', -1)
(-118, -138, 'DDGc', 1)
(-9, -107, 'CDG', 1)
(-118, -131, 'CDG', 1)
(-68, -109, 'CDG', 1)
(-89, -131, 'DDGNGX_LOG_DEBUG_CORE', 1)
(-83, -114, 'DDGc', 1)
(-118, -139, 'DDGc', 1)
(-118, -138, 'CDG', 1)
(-104, -139, 'DDGc', 1)
(-9, -104, 'CDG', 1)
(-104, -138, 'DDGc', 1)
(-83, -139, 'DDGc', 1)
(-68, -114, 'CDG', 1)
(-118, -131, 'DDGc', 1)
===========================
(-139, 1, '-', 0, '+1343', 'c->read->handler(c->read)')
(-131, 1, '-', 0, '+1339', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection again")')
(-3, 0, 'D', 39, '1292', 'ngx_cycle_t *cycle')
(-143, -1, '-', 0, '-1343', 'c->read->handler(c->read)')
(-89, 0, 'D', 15, '1324', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection")')
(-140, -1, '-', 0, '-1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-108, 1, '-', 0, '+1316', 'for (i = 0; i < n; i++)')
(-109, 1, '-', 0, '+1327', 'c->close = 1')
(-114, 1, '-', 0, '+1328', 'c->read->handler(c->read)')
(-68, 0, 'C', 10, '1317', 'if (ngx_queue_empty(&cycle->reusable_connections_queue))')
(-9, 0, 'C', 15, '1298', 'if (cycle->free_connection_n > cycle->connection_n / 16\\n        || cycle->reusable_connections_n == 0)')
(-141, -1, '-', 0, '-1316', 'for (i = 0; i < n; i++)')
(-104, 1, '-', 0, '+1313', 'c = NULL')
(-138, 1, '-', 0, '+1342', 'c->close = 1')
(-107, 1, '-', 0, '+1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-142, -1, '-', 0, '-1342', 'c->close = 1')
(-83, 0, 'D', 5, '1322', 'c = ngx_queue_data(q, ngx_connection_t, queue)')
(-118, 1, '-', 0, '+1331', 'if (cycle->free_connection_n == 0 && c && c->reusable)')
---------------------------
(-68, -142, 'CDG', -1)
(-9, -140, 'CDG', -1)
(-83, -143, 'DDGc', -1)
(-68, -143, 'CDG', -1)
(-140, -141, 'DDGn', -1)
===========================
(-3, 0, 'D', 39, '1292', 'ngx_cycle_t *cycle')
(-143, -1, '-', 0, '-1343', 'c->read->handler(c->read)')
(-89, 0, 'D', 15, '1324', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection")')
(-140, -1, '-', 0, '-1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-68, 0, 'C', 10, '1317', 'if (ngx_queue_empty(&cycle->reusable_connections_queue))')
(-9, 0, 'C', 15, '1298', 'if (cycle->free_connection_n > cycle->connection_n / 16\\n        || cycle->reusable_connections_n == 0)')
(-141, -1, '-', 0, '-1316', 'for (i = 0; i < n; i++)')
(-142, -1, '-', 0, '-1342', 'c->close = 1')
(-83, 0, 'D', 5, '1322', 'c = ngx_queue_data(q, ngx_connection_t, queue)')
---------------------------
(-104, -131, 'DDGc', 1)
(-9, -118, 'CDG', 1)
(-118, -139, 'CDG', 1)
(-3, -118, 'DDGcycle', 1)
(-83, -118, 'DDGc', 1)
(-83, -109, 'DDGc', 1)
(-104, -118, 'DDGc', 1)
(-83, -131, 'DDGc', 1)
(-107, -108, 'DDGn', 1)
(-118, -138, 'DDGc', 1)
(-9, -107, 'CDG', 1)
(-118, -131, 'CDG', 1)
(-68, -109, 'CDG', 1)
(-89, -131, 'DDGNGX_LOG_DEBUG_CORE', 1)
(-83, -114, 'DDGc', 1)
(-118, -139, 'DDGc', 1)
(-118, -138, 'CDG', 1)
(-104, -139, 'DDGc', 1)
(-9, -104, 'CDG', 1)
(-104, -138, 'DDGc', 1)
(-83, -139, 'DDGc', 1)
(-68, -114, 'CDG', 1)
(-118, -131, 'DDGc', 1)
===========================
(-139, 1, '-', 0, '+1343', 'c->read->handler(c->read)')
(-131, 1, '-', 0, '+1339', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection again")')
(-3, 0, 'D', 39, '1292', 'ngx_cycle_t *cycle')
(-89, 0, 'D', 15, '1324', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection")')
(-108, 1, '-', 0, '+1316', 'for (i = 0; i < n; i++)')
(-109, 1, '-', 0, '+1327', 'c->close = 1')
(-114, 1, '-', 0, '+1328', 'c->read->handler(c->read)')
(-68, 0, 'C', 10, '1317', 'if (ngx_queue_empty(&cycle->reusable_connections_queue))')
(-9, 0, 'C', 15, '1298', 'if (cycle->free_connection_n > cycle->connection_n / 16\\n        || cycle->reusable_connections_n == 0)')
(-104, 1, '-', 0, '+1313', 'c = NULL')
(-138, 1, '-', 0, '+1342', 'c->close = 1')
(-107, 1, '-', 0, '+1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-83, 0, 'D', 5, '1322', 'c = ngx_queue_data(q, ngx_connection_t, queue)')
(-118, 1, '-', 0, '+1331', 'if (cycle->free_connection_n == 0 && c && c->reusable)')
